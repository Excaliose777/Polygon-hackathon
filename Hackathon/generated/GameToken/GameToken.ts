// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GameEnded extends ethereum.Event {
  get params(): GameEnded__Params {
    return new GameEnded__Params(this);
  }
}

export class GameEnded__Params {
  _event: GameEnded;

  constructor(event: GameEnded) {
    this._event = event;
  }

  get PlayerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get playersAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokensEarned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get Score(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PlayerJoined extends ethereum.Event {
  get params(): PlayerJoined__Params {
    return new PlayerJoined__Params(this);
  }
}

export class PlayerJoined__Params {
  _event: PlayerJoined;

  constructor(event: PlayerJoined) {
    this._event = event;
  }

  get username(): string {
    return this._event.parameters[0].value.toString();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get playerId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get noOfGames(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dateJoined(): string {
    return this._event.parameters[4].value.toString();
  }

  get rewardTokensOwned(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get Scores(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }

  get highestScore(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get spinning(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GameToken__GetAplayerdetailsResultValue0Struct extends ethereum.Tuple {
  get UserName(): string {
    return this[0].toString();
  }

  get PlayersAddress(): Address {
    return this[1].toAddress();
  }

  get PlayersId(): BigInt {
    return this[2].toBigInt();
  }

  get MyGames(): BigInt {
    return this[3].toBigInt();
  }

  get Datejoined(): string {
    return this[4].toString();
  }

  get TokenOwned(): BigInt {
    return this[5].toBigInt();
  }

  get Scores(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get HighestScore(): BigInt {
    return this[7].toBigInt();
  }

  get spinning(): boolean {
    return this[8].toBoolean();
  }
}

export class GameToken extends ethereum.SmartContract {
  static bind(address: Address): GameToken {
    return new GameToken("GameToken", address);
  }

  GetAplayerdetails(): Array<GameToken__GetAplayerdetailsResultValue0Struct> {
    let result = super.call(
      "GetAplayerdetails",
      "GetAplayerdetails():((string,address,uint256,uint256,string,uint256,uint256[],uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      GameToken__GetAplayerdetailsResultValue0Struct
    >();
  }

  try_GetAplayerdetails(): ethereum.CallResult<
    Array<GameToken__GetAplayerdetailsResultValue0Struct>
  > {
    let result = super.tryCall(
      "GetAplayerdetails",
      "GetAplayerdetails():((string,address,uint256,uint256,string,uint256,uint256[],uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<GameToken__GetAplayerdetailsResultValue0Struct>()
    );
  }

  NumOfAllPlayers(): BigInt {
    let result = super.call(
      "NumOfAllPlayers",
      "NumOfAllPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_NumOfAllPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NumOfAllPlayers",
      "NumOfAllPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PeopleWhoSpinned(param0: BigInt): Address {
    let result = super.call(
      "PeopleWhoSpinned",
      "PeopleWhoSpinned(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_PeopleWhoSpinned(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "PeopleWhoSpinned",
      "PeopleWhoSpinned(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  areYouAPlayer(): boolean {
    let result = super.call("areYouAPlayer", "areYouAPlayer():(bool)", []);

    return result[0].toBoolean();
  }

  try_areYouAPlayer(): ethereum.CallResult<boolean> {
    let result = super.tryCall("areYouAPlayer", "areYouAPlayer():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  entryFee(): BigInt {
    let result = super.call("entryFee", "entryFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_entryFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("entryFee", "entryFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameStarted(): boolean {
    let result = super.call("gameStarted", "gameStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_gameStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("gameStarted", "gameStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeStamp(): BigInt {
    let result = super.call("lastTimeStamp", "lastTimeStamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeStamp",
      "lastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  s_randomLuck(): BigInt {
    let result = super.call("s_randomLuck", "s_randomLuck():(uint256)", []);

    return result[0].toBigInt();
  }

  try_s_randomLuck(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("s_randomLuck", "s_randomLuck():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_requestId(): BigInt {
    let result = super.call("s_requestId", "s_requestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_s_requestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("s_requestId", "s_requestId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  winner(): Address {
    let result = super.call("winner", "winner():(address)", []);

    return result[0].toAddress();
  }

  try_winner(): ethereum.CallResult<Address> {
    let result = super.tryCall("winner", "winner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get items_on_board(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class NewPlayerCall extends ethereum.Call {
  get inputs(): NewPlayerCall__Inputs {
    return new NewPlayerCall__Inputs(this);
  }

  get outputs(): NewPlayerCall__Outputs {
    return new NewPlayerCall__Outputs(this);
  }
}

export class NewPlayerCall__Inputs {
  _call: NewPlayerCall;

  constructor(call: NewPlayerCall) {
    this._call = call;
  }

  get _date(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NewPlayerCall__Outputs {
  _call: NewPlayerCall;

  constructor(call: NewPlayerCall) {
    this._call = call;
  }
}

export class ResetApplicationCall extends ethereum.Call {
  get inputs(): ResetApplicationCall__Inputs {
    return new ResetApplicationCall__Inputs(this);
  }

  get outputs(): ResetApplicationCall__Outputs {
    return new ResetApplicationCall__Outputs(this);
  }
}

export class ResetApplicationCall__Inputs {
  _call: ResetApplicationCall;

  constructor(call: ResetApplicationCall) {
    this._call = call;
  }
}

export class ResetApplicationCall__Outputs {
  _call: ResetApplicationCall;

  constructor(call: ResetApplicationCall) {
    this._call = call;
  }
}

export class SpinBoardCall extends ethereum.Call {
  get inputs(): SpinBoardCall__Inputs {
    return new SpinBoardCall__Inputs(this);
  }

  get outputs(): SpinBoardCall__Outputs {
    return new SpinBoardCall__Outputs(this);
  }
}

export class SpinBoardCall__Inputs {
  _call: SpinBoardCall;

  constructor(call: SpinBoardCall) {
    this._call = call;
  }

  get pricePaid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SpinBoardCall__Outputs {
  _call: SpinBoardCall;

  constructor(call: SpinBoardCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GameEndedCall extends ethereum.Call {
  get inputs(): GameEndedCall__Inputs {
    return new GameEndedCall__Inputs(this);
  }

  get outputs(): GameEndedCall__Outputs {
    return new GameEndedCall__Outputs(this);
  }
}

export class GameEndedCall__Inputs {
  _call: GameEndedCall;

  constructor(call: GameEndedCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rewardtokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GameEndedCall__Outputs {
  _call: GameEndedCall;

  constructor(call: GameEndedCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
